# Cursor Rules

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
- Use strict mode in TypeScript for better type safety.

Naming Conventions

- Favor named exports for components and utilities.
- Use lowercase with dashes for directories (e.g., components/auth-wizard).

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple
statements.
- Use declarative JSX, keeping SX minimal and readable.

Ul and Styling

- Use Tailwind for utility-based styling
- Use a mobile-first approach

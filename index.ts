import { existsSync, mkdirSync, unlinkSync } from 'node:fs'
import { $ } from 'bun'
import type { RepomixConfig } from 'repomix'

const dir = import.meta.dirname
const repomixDir = `${dir}/repomix`

type AdditionalConfig = {
	forceUpdate?: boolean
}

type PromptConfig = {
	packages: {
		name: string
		config: RepomixConfig & AdditionalConfig
	}[]
}

const config: PromptConfig = {
	packages: [
		createPackageConfig('yamadashy', 'repomix'),
		createPackageConfig('tanstack', 'query', {
			include: ['docs/framework/react', 'README.md', 'examples/react/**/src', 'packages/react-query/src'],
			ignore: {
				useGitignore: true,
				customPatterns: ['__tests__'],
			},
			forceUpdate: true,
		}),
		// Add more packages as needed
	],
}

async function main() {
	const isGlobalForceUpdate = process.argv.includes('--force')

	for (const pkg of config.packages) {
		const outputPkgName = pkg.name.replace(/\//g, '-')
		const outputFilename = `${outputPkgName}.xml`

		const shouldForceUpdate = isGlobalForceUpdate || pkg.config.forceUpdate

		if (!(await checkDate(outputFilename, shouldForceUpdate ?? false))) {
			console.log(`Skipping ${pkg.name} because it was generated less than 7 days ago`)
			continue
		}

		const { createConfigFile, deleteConfigFile, configFile } = await setupConfigFile()

		// create temp config file to pass into cli
		await createConfigFile(pkg.config)

		await $`bunx repomix --remote ${pkg.name} --style xml --output ${outputFilename} --config ${configFile}`

		// delete temp config file
		await deleteConfigFile()

		// move the file to the repomix directory
		await safeMoveWithDirCreation(outputFilename, `./repomix/${outputFilename}`)
	}
}

main().catch(console.error)

function createPackageConfig(
	username: string,
	projectName: string,
	additionalConfig: Partial<RepomixConfig> & { forceUpdate?: boolean } = {},
): {
	name: string
	config: RepomixConfig & { forceUpdate?: boolean }
} {
	return {
		name: `${username}/${projectName}`,
		config: {
			include: ['src', 'README.md'],
			output: {},
			forceUpdate: false,
			...additionalConfig,
		},
	}
}
async function setupConfigFile() {
	const configFile = `${repomixDir}/repomix.json`
	const createConfigFile = async (config: RepomixConfig) => {
		await Bun.write(configFile, JSON.stringify(config, null, 2))
	}

	const deleteConfigFile = async () => {
		unlinkSync(configFile)
	}

	return { createConfigFile, deleteConfigFile, configFile }
}

async function safeMoveWithDirCreation(sourcePath: string, destPath: string) {
	// Extract directory path
	const destDir = destPath.split('/').slice(0, -1).join('/')

	// Create destination directory if it doesn't exist
	if (!existsSync(destDir)) {
		try {
			mkdirSync(destDir, { recursive: true })
			console.log(`Created directory: ${destDir}`)
		} catch (error) {
			console.error(`Failed to create directory: ${destDir}`, error)
			return false
		}
	}

	try {
		await $`mv ${sourcePath} ${destPath}`
		return true
	} catch (error) {
		console.error(`Failed to move file: ${sourcePath} to ${destPath}`, error)
		return false
	}
}

async function checkDate(filePath: string, shouldForceUpdate: boolean) {
	try {
		const file = Bun.file(`${repomixDir}/${filePath}`)

		// If file doesn't exist, return true to allow generation
		if (!(await file.exists())) {
			return true
		}

		const text = await file.text()
		const date = text.match(/Generated by Repomix on: (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)/)?.[1]

		if (!date) {
			return true // No date found, allow generation
		}

		// Check if the date is older than 7 days
		return new Date(date).getTime() <= Date.now() - 7 * 24 * 60 * 60 * 1000 || shouldForceUpdate
	} catch (error) {
		console.error(`Error checking date for ${filePath}:`, error)
		return true // Default to allowing generation on error
	}
}
